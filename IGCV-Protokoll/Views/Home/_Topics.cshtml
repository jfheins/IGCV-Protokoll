@using IGCV_Protokoll.Models
@using IGCV_Protokoll.util
@using IGCV_Protokoll.ViewModels
@model IGCV_Protokoll.ViewModels.CompleteTopicList
			 
@foreach (Topic topic in Model.Topics)
{
	<div class="col-xs-12 col-lg-6 masonry-item">
		<div class="panel panel-primary topic-panel">
			<div class="panel-heading">
				<div class="panel-title-right">
					<p>
						<span class="label label-default">@topic.Time</span>
						@{
							switch (topic.Priority)
							{
								case Priority.Low:
									@: <span class="label label-info">Niedrig</span>
							break;

								case Priority.Medium:
									@: <span class="label label-warning">Mittel</span>
							break;

								case Priority.High:
									@: <span class="label label-danger">Wichtig</span>
							break;
							}
						}
						<span class="usertile">@topic.Owner</span>
					</p>
					<p>Geändert @Html.DisplayFor(model => topic.ValidFrom)</p>
				</div>
				@if (Model.UnreadTopics.Contains(topic.ID))
				{
					<span style="color: #D48625; display: inline-block; float: left; font-size: 180%; margin: 2px 16px 0 0;">
						<span class="glyphicon glyphicon-asterisk"></span>
					</span>
				}
				<span class="panel-collapse-heading" style="display: inline-block; float: left; font-size: 180%; margin: 2px 16px 0 -12px;">
					<a onclick="toggleSection(this, '#topicContent_@topic.ID' );" style="color: inherit;"></a>
				</span>
				<h3 class="panel-title">
					@{
						var htmlattr = ViewBag.CurrentSession != null ? new { target = "_blank" } : null; // Im Sitzungsmodus target=_blank
					}
					@Html.ActionLink(topic.Title, "Details", "Topics", new { id = topic.ID, Area = "" }, htmlattr)
					@foreach (var tag in Model.Tags[topic.ID])
					{
						@Html.DisplayFor(model => tag.Tag)
					}
				</h3>
				<p class="panel-title">@topic.SessionType.Name</p>
			</div>
			<div id="topicContent_@topic.ID" class="topic-content collapse in">
				<div class="panel-body">
					@{ 	string descClass = topic.TopicType == TopicType.Discussion ? "col-md-6" : "col-md-12"; }
					<div class="@descClass">
						<h6>@Html.DisplayNameFor(model => topic.Description):</h6>
						@Html.DisplayWithLinksFor(model => topic.Description, "String_Multiline")
					</div>
					@if (topic.TopicType == TopicType.Discussion)
					{
						<hr class="visible-xs visible-sm"/>
						<div class="col-md-6">
							<h6>@Html.DisplayNameFor(model => topic.Proposal):</h6>
							@Html.DisplayWithLinksFor(model => topic.Proposal, "String_Multiline")
						</div>
					}
				</div>
				@if (topic.TopicType == TopicType.Discussion)
				{
					<div class="panel-separator" id="auditorlist_@topic.ID">
						@Html.Action("_List", "Votes", new {topic, Area = "", linkLevel = ViewBag.CurrentSession != null ? VoteLinkLevel.Everyone : VoteLinkLevel.OnlyMine})
					</div>
				}
				@{
					var cvm = new CommentListViewModel
					{
						Items = Model.Comments[topic.ID].OrderBy(c => c.Created).ToList(),
						AllowDeletion = true,
						ParentTopicID = topic.ID,
						ShowCreateForm = !topic.IsReadOnly && !Model.LockedTopics.Contains(topic.ID)
					};

					string classA = "collapsed";
					string classDiv = "panel-collapse collapse";

					if (cvm.Items.Count < 2 || topic.IsReadOnly) // Sektion ausklappen
					{
						classA = null;
						classDiv = "panel-collapse collapse in";
					}
				}
				<div class="panel panel-primary comment-panel">
					<div class="panel-heading panel-collapse-heading" style="position: relative;">
						<h4 class="panel-title">
							<a onclick="toggleSection(this, '#comments_@topic.ID');" class="@classA">
								@if (@cvm.Items.Count == 0)
								{
									@:Keine Kommentare
								}
								else if (@cvm.Items.Count == 1)
								{
									@:Ein Kommentar
								}
								else
								{
									@cvm.Items.Count
									@:Kommentare
								}
								<span class="divlink"></span>
							</a>
						</h4>
					</div>
					<div id="comments_@topic.ID" class="@classDiv">
						@{ Html.RenderPartial("~/Views/Comments/_CommentList.cshtml", cvm); }
					</div>
				</div>
				<div class="panel-footer">
					@{ var dc = Model.Documents[topic.ID]; }
					@if (dc.VisibleDocuments.Any())
					{
						@Html.Action("_List", "Attachments", new {id = dc.ID, makeList = true, Area = ""})
					}
					else
					{
						@:Keine Dokumente vorhanden
					}
				</div>
			</div>
		</div>
	</div>
}


@using (Html.Delayed(null, "CollapseComments"))
{
	<script type="text/javascript">
		function collapseTopicOut(link, content) {

			content.slideDown(400, "easeOutQuad", function() { PerformMasonryLayout(); });
			link.removeClass("collapsed");
		}

		function collapseTopicIn(link, content) {

			content.slideUp(400, "easeOutQuad", function() { PerformMasonryLayout(); });
			link.addClass("collapsed");
		}

		function toggleSection(sender, selector) {
			if ($(sender).hasClass("collapsed")) { // Ausklappen

				$(selector).show(); // Workaround, damit sich die GUI-Elemente nicht während der Animation überlappen
				PerformMasonryLayout();
				$(selector).hide();

				collapseTopicOut($(sender), $(selector));
			} else { // Einklappen
				collapseTopicIn($(sender), $(selector));
			}
		}
	</script>
}

@Html.RenderDelayed()